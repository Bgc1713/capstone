Matrix Capstone Log

Everything up until the start of this log: Matrix (With deprecated matrix operations), test_main, adddition (Deprecated)

3-13-19: 
 - Creating the Mtxops class. This will act like the Math class and serves for matrix operations.
 	- I didn't like using the Matrix class to do math, as you needed a matrix to do the work on.
 	- The idea is to create a class to call functions with the two operands as parameters instead.
 	- This feels much more "proper", though you lose an immediate plus-equals operation. 
 		- I think it's worth it, because it makes matrix operations behave like Math.(Operation), which is something most java developers will be familiar with, therefore, it should improve usability.
 	- Ultimately, I've properly moved addition and subtraction to Mtxops, I added Multiplication for both scalars and dot products.
 	
 - A short justification for row ops in the matrix class with matrix ops in a separate class: You always do matrix operations with two or more matrices, or some form of "outer matrix" participation, but row operations happen exclusively in a single matrix. It is more intuitive to call those ops on the specific matrix, it's less intuitive to call two matrixes by one matrix being called on and the other matrix having a paramter being passed.
 
3-14-19:
 - Created copy constructor for matrixes
 - Started work on gaussian elimination
 	- Got it completed, but it probably doesn't work on outliers such as 1x1 matrices. I was told code was expectedto be alpha quality so I won't worry too hard.
 	- I forgot to add multiply and divide row operations so I had to implement them real quick.
 	
3-18-19:
 - Created augmentation constructor for matrixes
 	- it can be debated that a separate "tools" class could be made for augmentation, but it makes more sense to "construct" matrixes with the actual constructor.
 	
3-27-19
 - Moved all matrix operations and reductions into matrix. My idea of static Mtxops class was wrong :(
 	- This really wasn't difficult to move back. It really demonstrates how even if the logic is in the wrong place, if it's sound logic, it will work anywhere.
 - Started thinking about potential decorator uses? It seems most decorators are using an interface, which I really wouldn't want to implement when my Matrix work focuses on just doubles.
 	- Perhaps an interface wouldn't be hard? The interface would really only need constructor, setter, and getter as it's given things. Then I just say my current class extends it.
 	- If I were to create a decorator, my plan would be to make it so that a decorated Matrix contains an addition Matrix for things such as augmentation. Usually when you augment a matrix, it is important to be able to access just the augmented part.
 		- An assistant matrix would also be nice for LU factorization.
 - Decorator doesn't seem like it would work, settled for template method perhaps.
 
 4-3-19
 - Created Gauss-Jordan eliminations (Both done to a matrix and retreived from a matrix)
 	- I was partially wrong on my assumption of "Just do normal gauss elimination and then do the numbers above leading ones."
 	- By doing so, I would have to create another complex algorithm that finds all leading ones (And deal with associated out-of-bounds problems)
 	- Basically you can do it in terms of eliminate then do more, but it's easier to just modify the original code to do it all at once.
 	- Also, it demonstrates how the way I would do it in the real world (Gauss elimination all the way, THEN remove numbers above leading ones) is complex to implement.
 		- Ironically, doing it the way this program does it in real life is possible, but seems harder to me.